/**************
**           **
**  PARSING  **
**           **
***************/

void Hexlight::handlePatterns() {
	switch(this->pattern) {
		case 1:
			{
				int a = 1;
				while(incomingPacket[a] != 0) {
					this->parseColor(this->incomingPacket, a);
					a += 2;
				}
				this->colorWipe(this->strip.Color(this->red, this->green, this->blue, this->white), 50);
			break;
			}
		case 2:
				this->strip.setPixelColor (this->incomingPacket[1], this->strip.Color(this->incomingPacket[2], this->incomingPacket[3], this->incomingPacket[4], this->incomingPacket[5]));
				this->strip.show();
			break;
		case 3:
				this->rainbowCycle(10);
			break;
		case 4:
				this->candle();
			break;
	}
}
	
void Hexlight::parsePacket() {
	int packetSize = this->udp.parsePacket();
	
	if (packetSize) {
		Serial.printf("Received %d bytes from %s, port %d\n", packetSize, this->udp.remoteIP().toString().c_str(), this->udp.remotePort());
		int len = this->udp.read(this->incomingPacket, 255);
		if (len > 0) {
			this->incomingPacket[len] = 0;
		}
		Serial.printf("UDP packet contents: %s\n", this->incomingPacket);
		
		if(this->incomingPacket[0] == '*') {
			this->debug("Colorwipe");
			this->pattern = 1;
		}
		else if(this->incomingPacket[0] == '#') {
			this->debug("Setting single LED");
			this->pattern = 2;
		}
		else if(this->incomingPacket[0] == 'p') {
			if(this->incomingPacket[1] == 'r') {
				this->debug("RainbowCycle - Parsing");
				this->pattern = 3;
			}
			else if(this->incomingPacket[1] == 'c') {
				this->debug("Candle");
				this->pattern = 4;
			}
		}
	}
}

void Hexlight::parseColor(char* incomingPacket, int i) {
	switch(this->incomingPacket[i]) {
		case 98: // b
		case 66: // B
			this->blue = this->incomingPacket[i+1];
			break;
		case 82:	// R
		case 114: // r
			this->red = this->incomingPacket[i+1];
			break;
		case 103: // g
		case 71:	// G
			this->green = this->incomingPacket[i+1];
			break;
		case 119: // w
		case 87:	// W
			this->white = this->incomingPacket[i+1];
			break;
		case 120: //x
		case 88:	//X
			this->red = 0;
			this->green = 0;
			this->blue = 0;
			this->white = 0;
			break;
	}
}